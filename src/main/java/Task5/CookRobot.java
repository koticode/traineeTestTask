package Task5;

//Наследование:
//Мы наследуем все поля и методы из родительского класса Robots
//Данный класс объединяет методы для всех классов роботов с назначением "повар". Все наследующие классы будут обладать теми же методами, что и этот класс.
public abstract class CookRobot extends Robots {
// Класс сделан абстрактным, чтобы из него нельзя было создавать объекты. т.к. объект этого класса не может быть проверен по типу топлива и способу перемещения, а значит, может быть создан с ошибками.

    // Инкапсуляция+полиморфизм:
// Задаем фиксированное значение для getPurposeType() для класса роботов поваров, оно отличается от суперкласса.Изменить его значение можно только в этом классе, это снижает вероятность возникновения ошибок в программе.
    @Override
    public String getPurposeType() {
        return "повар";
    }
    // Полиморфизм
// Создаем переопределение метода, позволяет каждому классу по своему реализовывать метод - возвращать в этом методе уникальное для класса назначение.Это помогает обходиться минимальным количеством методов, а не плодить для каждого класса свой.
    @Override
    public void Purpose(){
        System.out.println("Я робот-"+getPurposeType());
    }
    public CookRobot(String purpose, String fuel) { // конструктор для создания объектов наследующих классов
        super(purpose, fuel);
        this.purposeType = purpose;
        this.fuelType = fuel;
    }
    // Уникальный метод для роботов класса WadleRobot ("повар") и его наследников:
    private static void Prepare() { //private static, т.к. это общее свойство для всех объектов класса "повар"
        System.out.println("Я готовлю");
    }

    // Полиморфизм:
// Переопределяем метод Skill для этого класса:
    public void Skill() { // помещаем в Skill профильный навык для этого класса
        Prepare();
    }
}




